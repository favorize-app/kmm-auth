plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'org.jetbrains.dokka' version "1.7.10"
}

apply from: '../properties.gradle'

android {
    namespace "${setup.appId}.example"
    compileSdkVersion setup.compileSdkVersion

    defaultConfig {
        applicationId "${setup.appId}.example"
        minSdkVersion setup.minSdkVersion
        targetSdkVersion setup.targetSdkVersion
        versionCode buildVersionCode()
        versionName buildVersionName()

        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding = true
    }

    flavorDimensions 'api'
    productFlavors {
        dev {
            dimension 'api'
            applicationIdSuffix setup.suffix.appId.dev
            versionNameSuffix setup.suffix.versionName.dev
            resValue "string", "app_version", String.format("%s(%s)", "${defaultConfig.versionName}", "${versionNameSuffix}")
            resValue "string", "app_name", String.format("%s", setup.appName.dev)
            buildConfigField 'String', 'SERVER_V1', String.format("%s", server.v1.dev)
        }
        stage {
            dimension 'api'
            applicationIdSuffix setup.suffix.appId.stage
            versionNameSuffix setup.suffix.versionName.stage
            resValue "string", "app_version", String.format("%s(%s)", "${defaultConfig.versionName}", "${versionNameSuffix}")
            resValue "string", "app_name", String.format("%s", setup.appName.stage)
            buildConfigField 'String', 'SERVER_V1', String.format("%s", server.v1.stage)
        }
        beta {
            dimension 'api'
            applicationIdSuffix setup.suffix.appId.beta
            versionNameSuffix setup.suffix.versionName.beta
            resValue "string", "app_version", String.format("%s(%s)", "${defaultConfig.versionName}", "${versionNameSuffix}")
            resValue "string", "app_name", String.format("%s", setup.appName.beta)
            buildConfigField 'String', 'SERVER_V1', String.format("%s", server.v1.beta)
        }
        store {
            dimension 'api'
            resValue "string", "app_version", "${defaultConfig.versionName}"
            resValue "string", "app_name", String.format("%s", setup.appName.store)
            buildConfigField 'String', 'SERVER_V1', String.format("%s", server.v1.store)
        }
    }
}

dokkaGfm {
    suppressInheritedMembers.set(true)
    outputDirectory.set(file("${rootProject.rootDir}/docs/${project.name}"))
}

afterEvaluate {
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    dependencies {
        productFlavors.each { productFlavorName ->
            buildTypes.each { buildTypeName ->
                "${productFlavorName}${buildTypeName.capitalize()}Implementation"("tossaro.android.core:${productFlavorName}-${buildTypeName}:${setup.coreVersion}")
                // comment this block if using local package
                //"${productFlavorName}${buildTypeName.capitalize()}Implementation"("kotlin.android.auth:${productFlavorName}-${buildTypeName}:${buildVersionName()}")
            }
        }
    }
}

dependencies {
    // uncomment below implementation if using local package
    implementation project(":auth")

    dep.each {
        if (it.configuration.equals("platform")) {
            add("implementation", platform(it.dependency))
        } else {
            add(it.configuration, it.dependency, it.options)
        }
    }
}